I"8	<blockquote>
  <p>This document is not completed and will be updated anytime.</p>
</blockquote>

<p>第一篇博客就交给递归大哥吧，毕竟递归对于我来说，真的好难，有的时候看不懂，有的时候看得懂但又不会写……
先阐述一下递归如何使用，然后再与letcode上的题相结合进行使用</p>

<h2 id="catagory">Catagory</h2>

<ol>
  <li><a href="#理论">理论</a>
    <ol>
      <li><a href="#什么是递归">什么是递归</a></li>
      <li><a href="#递归的三要素">递归的三要素</a></li>
    </ol>
  </li>
  <li><a href="#实际">实际</a>
    <ol>
      <li><a href="#题目描述">题目描述</a></li>
      <li><a href="#解决思路">解决思路</a></li>
    </ol>
  </li>
  <li><a href="#总结">总结</a></li>
</ol>

<hr />

<h2 id="理论">理论</h2>
<h3 id="什么是递归">什么是递归</h3>
<blockquote>
  <p>程序调用自身的编程技巧称为递归 （百度百科）</p>
</blockquote>

<p>详细来说，递归就是在有限次数的情况下，一层一层的调用自己，每次调用就是将此时的所有程序数据保存在栈中（为的是“保护现场”），以此来保证里层的程序执行完后可以安全正确返回到它的上一层程序。</p>

<h3 id="递归的三要素">递归的三要素</h3>
<ul>
  <li>程序要解决什么问题</li>
  <li>递归关系式</li>
  <li>递归的结束条件</li>
</ul>

<p>递归程序一般要比普通程序的理解难度大，如果再云里雾里没弄清要解决什么问题，写出正确的递归程序的可能性大大降低，因此要理解问题。
在理解问题的基础上，要推导出递推关系式，也就是怎么把当前问题的规模一步一步缩小，通过解决小问题，进而将小问题组合起来解决程序问题。
程序不可无限循环，递归也是如此，递归程序的执行次数也是有限次数。那么什么时候退出递归程序，这就要确定递归的结束条件。</p>

<hr />

<h2 id="实际">实际</h2>
<p>在理论描述完递归之后，采用letcode中的一道题目来试一把。（letcode 39.组合总和）</p>
<h3 id="题目描述">题目描述</h3>
<p><img src="../img/recursion/recursion-1.png" alt="题目描述" title="区块链" /></p>
<h3 id="解决思路">解决思路</h3>
<hr />

<h2 id="总结">总结</h2>

:ET