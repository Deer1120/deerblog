I"h^<p>最近在面试，被问到了循环依赖有哪几种。因此写下这篇博客，记录一下。（毕竟在面试之前，自己一直以为只有一种，无知的自己，好想锤死自己！）</p>

<h2 id="catagory">Catagory</h2>

<ol>
  <li><a href="#什么是循环依赖">什么是循环依赖</a></li>
  <li><a href="#循环依赖的分类">循环依赖的分类</a>
    <ol>
      <li><a href="#构造函数注入的循环依赖">构造函数注入的循环依赖</a></li>
      <li><a href="#set方式注入的循环依赖">set方式注入的循环依赖</a></li>
    </ol>
  </li>
</ol>

<hr />

<h2 id="什么是循环依赖">什么是循环依赖</h2>
<blockquote>
  <p>两个及两个以上的bean互相持有对方，比如：A中有B，B中有C，C中有A</p>
</blockquote>

<hr />

<h2 id="循环依赖的分类">循环依赖的分类</h2>
<p>spring中的bean可以通过构造函数注入，也可以通过set方式注入，那么循环依赖也会存在这两种情况。</p>

<h3 id="构造函数注入的循环依赖">构造函数注入的循环依赖</h3>
<p>首先，这种方式是不可行的，接下来通过例子来跟源码进行调试，说明为什么不可以</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">deer</span><span class="o">.</span><span class="na">study</span><span class="o">.</span><span class="na">circleDependency</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>

<span class="cm">/**
 * @author lu
 * @description
 * @date 2020-07-04
 */</span>

<span class="nd">@Component</span><span class="o">(</span><span class="s">"a"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>


    <span class="kd">private</span> <span class="no">B</span> <span class="n">b</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setB</span><span class="o">(</span><span class="no">B</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">A</span><span class="o">(</span><span class="no">B</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">deer</span><span class="o">.</span><span class="na">study</span><span class="o">.</span><span class="na">circleDependency</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>

<span class="cm">/**
 * @author lu
 * @description
 * @date 2020-07-04
 */</span>

<span class="nd">@Component</span><span class="o">(</span><span class="s">"b"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">B</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="no">C</span> <span class="n">c</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setC</span><span class="o">(</span><span class="no">C</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">c</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">B</span><span class="o">(</span><span class="no">C</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">c</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">deer</span><span class="o">.</span><span class="na">study</span><span class="o">.</span><span class="na">circleDependency</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>

<span class="cm">/**
 * @author lu
 * @description
 * @date 2020-07-04
 */</span>


<span class="nd">@Component</span><span class="o">(</span><span class="s">"c"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">C</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="no">A</span> <span class="n">a</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setA</span><span class="o">(</span><span class="no">A</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">a</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">C</span><span class="o">(</span><span class="no">A</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">a</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">deer</span><span class="o">.</span><span class="na">study</span><span class="o">.</span><span class="na">circleDependency</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.ComponentScan</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="cm">/**
 * @author lu
 * @description
 * @date 2020-07-04
 */</span>
<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">"com.deer.study.circleDependency"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">deer</span><span class="o">.</span><span class="na">study</span><span class="o">.</span><span class="na">circleDependency</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.AnnotationConfigApplicationContext</span><span class="o">;</span>

<span class="cm">/**
 * @author lu
 * @description
 * @date 2020-07-04
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">AnnotationConfigApplicationContext</span> <span class="n">context</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Config</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="no">A</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>
<p>程序的运行结果截取部分：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Caused</span> <span class="nl">by:</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">beans</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">BeanCurrentlyInCreationException</span><span class="o">:</span> <span class="nc">Error</span> <span class="n">creating</span> <span class="n">bean</span> <span class="n">with</span> <span class="n">name</span> <span class="sc">'a'</span><span class="o">:</span> <span class="nc">Requested</span> <span class="n">bean</span> <span class="n">is</span> <span class="n">currently</span> <span class="n">in</span> <span class="nl">creation:</span> <span class="nc">Is</span> <span class="n">there</span> <span class="n">an</span> <span class="n">unresolvable</span> <span class="n">circular</span> <span class="n">reference</span><span class="o">?</span>
	<span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">beans</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">DefaultSingletonBeanRegistry</span><span class="o">.</span><span class="na">beforeSingletonCreation</span><span class="o">(</span><span class="nc">DefaultSingletonBeanRegistry</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">345</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">beans</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">DefaultSingletonBeanRegistry</span><span class="o">.</span><span class="na">getSingleton</span><span class="o">(</span><span class="nc">DefaultSingletonBeanRegistry</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">221</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">beans</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">AbstractBeanFactory</span><span class="o">.</span><span class="na">doGetBean</span><span class="o">(</span><span class="nc">AbstractBeanFactory</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">315</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">beans</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">AbstractBeanFactory</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">AbstractBeanFactory</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">199</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">beans</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">config</span><span class="o">.</span><span class="na">DependencyDescriptor</span><span class="o">.</span><span class="na">resolveCandidate</span><span class="o">(</span><span class="nc">DependencyDescriptor</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">251</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">beans</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">DefaultListableBeanFactory</span><span class="o">.</span><span class="na">doResolveDependency</span><span class="o">(</span><span class="nc">DefaultListableBeanFactory</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1138</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">beans</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">DefaultListableBeanFactory</span><span class="o">.</span><span class="na">resolveDependency</span><span class="o">(</span><span class="nc">DefaultListableBeanFactory</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1065</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">beans</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">ConstructorResolver</span><span class="o">.</span><span class="na">resolveAutowiredArgument</span><span class="o">(</span><span class="nc">ConstructorResolver</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">815</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">beans</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">ConstructorResolver</span><span class="o">.</span><span class="na">createArgumentArray</span><span class="o">(</span><span class="nc">ConstructorResolver</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">721</span><span class="o">)</span>
	<span class="o">...</span> <span class="mi">42</span> <span class="n">more</span>
</code></pre></div></div>

<p>Spring首先实例化A类，在初始化A类的时候，发现通过构造函数需要B类，那么Spring去初始化B类，发现需要C类，
那么接着去初始化C类，发现需要A类，到这里，又去Spring中加载A类：
那么接下来重头戏来了，跟源代码调试：</p>

<p><img src="/img/recursion/circular/circular2.png" alt="代码调试" title="代码调试" /></p>

<p><img src="/img/recursion/circular/circular3.png" alt="代码调试" title="代码调试" /></p>

<p><img src="/img/recursion/circular/circular4.png" alt="代码调试" title="代码调试" /></p>

<p><img src="/img/recursion/circular/circular5.png" alt="代码调试" title="代码调试" /></p>

<p><img src="/img/recursion/circular/circular6.png" alt="代码调试" title="代码调试" /></p>

<p>由上面的调试过程可知，当C类试图在加载A的时候，程序抛出异常。那么C无法成功创建，那么依赖C的B，依赖B的A同样
无法创建。所以构造函数注入的循环依赖是无法成功的。</p>

<h3 id="set方式注入的循环依赖">set方式注入的循环依赖</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">deer</span><span class="o">.</span><span class="na">study</span><span class="o">.</span><span class="na">circleDependency</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>

<span class="cm">/**
 * @author lu
 * @description
 * @date 2020-07-04
 */</span>
<span class="nd">@Component</span><span class="o">(</span><span class="s">"d"</span><span class="o">)</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">D</span> <span class="o">{</span>


    <span class="no">E</span> <span class="n">e</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setE</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">;</span>
    <span class="o">}</span>


<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">deer</span><span class="o">.</span><span class="na">study</span><span class="o">.</span><span class="na">circleDependency</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Scope</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>

<span class="cm">/**
 * @author lu
 * @description
 * @date 2020-07-04
 */</span>
<span class="nd">@Component</span><span class="o">(</span><span class="s">"e"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">E</span> <span class="o">{</span>
    <span class="no">D</span> <span class="n">d</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setD</span><span class="o">(</span><span class="no">D</span> <span class="n">d</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">d</span> <span class="o">=</span> <span class="n">d</span><span class="o">;</span>
    <span class="o">}</span>


<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">deer</span><span class="o">.</span><span class="na">study</span><span class="o">.</span><span class="na">circleDependency</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.AnnotationConfigApplicationContext</span><span class="o">;</span>

<span class="cm">/**
 * @author lu
 * @description
 * @date 2020-07-04
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">AnnotationConfigApplicationContext</span> <span class="n">context</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Config</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="no">D</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>
<p>运行结果：
<img src="/img/recursion/circular/circular11.png" alt="运行结果" title="运行结果" /></p>

<p>通过set方式注入的循环依赖，就可以成功！为什么呢？来看调试！</p>

<p><img src="/img/recursion/circular/circular7.png" alt="代码调试" title="代码调试" /></p>

<p>由上面的调试可知，D依赖E，E依赖D。D在创建的时候，去找E，那么E开始创建，E创建时去找到了D。那么E创建
成功，随之D也创建成功。因此，set方式注入的循环依赖是可行的。</p>

<p>解答一下为什么在构造函数注入的循环依赖，A-&gt;B-&gt;C-&gt;A时的getSingleton(“a”)为null，而set方式的D-&gt;E-&gt;D
时的getSingleton(“d”)就可以获取到对象呢？看代码！</p>

<p><img src="/img/recursion/circular/circular8.png" alt="代码调试" title="代码调试" /></p>

<p><img src="/img/recursion/circular/circular9.png" alt="代码调试" title="代码调试" /></p>

<p>singletonObject = singletonFactory.getObject(); 这个方法代表的意思是：如果当前bean存在于spring容器中，
那么就直接获取；如果不存在，那么就去创建这个bean。重头戏来了！如果是通过构造函数注入的，spring会通过这个有参的
构造函数去创建bean，然而如上调试过程，构造函数的参数都获取不到，那么在创建的过程中抛出异常报错，因此创建失败。那么代码也就无法往下继续执行，也就无法执行到
addSingleton(beanName, singletonObject);这个方法。反之，如果是通过set方法注入的，spring会通过无参数
构造函数去实例化这个bean，程序可以顺利执行，创建了bean，赋值给了singletonObject，继续往下执行，执行到
addSingleton(beanName, singletonObject);为什么会强调这个方法呢？来，看代码！</p>

<p><img src="/img/recursion/circular/circular10.png" alt="代码调试" title="代码调试" /></p>

<p>在这里我们尤为关注的可能就是这个方法中的this.singletonObjects.put(beanName, singletonObject);
对于set方式注入，因为在第一次初始化D的时候，就已经把D对象放入了singletonObjects中，那么当E再获取D的时候，
通过getSingleton方法就可以取到了！然而对于通过构造方式注入的，在创建对象的时候已经出错了，都没执行到这个方法，
因此在getSingleton获取到的是null。</p>

<p><small>这篇博客后期一定会逐步完善，把不是那么完善的内容放出来的原因就是逼着自己去完善！不然拖延症…..逼自己一把！</small></p>

:ET